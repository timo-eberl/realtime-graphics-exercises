shader_type spatial;

uniform float age : hint_range(0.0, 1.0) = 0.0;

uniform vec3 albedo_new : source_color = vec3(0);
uniform float roughness_new = 0.27;

uniform vec3 albedo_old : source_color = vec3(0);
uniform float roughness_old = 0.8;
uniform sampler2D noise_map_old : filter_linear, repeat_enable;
uniform sampler2D noise_map_old_2 : filter_linear, repeat_enable;
uniform sampler2D normal_map_old : filter_linear, repeat_enable;
uniform vec3 oxidized_albedo : source_color = vec3(0);
uniform float oxidized_roughness = 1.0;

// code generated by godot START
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
varying vec3 uv1_triplanar_pos;
uniform float uv1_blend_sharpness : hint_range(0.0, 150.0, 0.001);
varying vec3 uv1_power_normal;
vec4 triplanar_texture(sampler2D p_sampler, vec3 p_weights, vec3 p_triplanar_pos) {
	vec4 samp = vec4(0.0);
	samp += texture(p_sampler, p_triplanar_pos.xy) * p_weights.z;
	samp += texture(p_sampler, p_triplanar_pos.xz) * p_weights.y;
	samp += texture(p_sampler, p_triplanar_pos.zy * vec2(-1.0, 1.0)) * p_weights.x;
	return samp;
}
void vertex() {
	vec3 normal = NORMAL;
	TANGENT = vec3(0.0, 0.0, -1.0) * abs(normal.x);
	TANGENT += vec3(1.0, 0.0, 0.0) * abs(normal.y);
	TANGENT += vec3(1.0, 0.0, 0.0) * abs(normal.z);
	TANGENT = normalize(TANGENT);
	BINORMAL = vec3(0.0, 1.0, 0.0) * abs(normal.x);
	BINORMAL += vec3(0.0, 0.0, -1.0) * abs(normal.y);
	BINORMAL += vec3(0.0, 1.0, 0.0) * abs(normal.z);
	BINORMAL = normalize(BINORMAL);
	// UV1 Triplanar: Enabled
	uv1_power_normal = pow(abs(NORMAL), vec3(uv1_blend_sharpness));
	uv1_triplanar_pos = VERTEX * uv1_scale + uv1_offset;
	uv1_power_normal /= dot(uv1_power_normal, vec3(1.0));
	uv1_triplanar_pos *= vec3(1.0, -1.0, 1.0);
}
// code generated by godot END

float inv_lerp(float a, float b, float t) {
	return (t - a) / (b - a);
}

float remap(float a1, float b1, float a2, float b2, float t) {
	return mix(a2, b2, inv_lerp(a1, b1, t));
}

void fragment() {
	METALLIC = 1.0;
	ALBEDO = mix(albedo_new, albedo_old, age);
	ROUGHNESS = mix(roughness_new, roughness_old, age);
	ROUGHNESS = pow(ROUGHNESS, 0.5);
	NORMAL_MAP = triplanar_texture(normal_map_old, uv1_power_normal, uv1_triplanar_pos).xyz;
	NORMAL_MAP_DEPTH = mix(0, 0.6, age);
	
	// oxidized effect
	float o = triplanar_texture(noise_map_old, uv1_power_normal, uv1_triplanar_pos).x;
	float o2 = triplanar_texture(noise_map_old_2, uv1_power_normal, uv1_triplanar_pos).x;
	float s = age * 0.5;
	float trans = 0.3;
	o = remap(s-trans, s, 1, 0, o);
	o = clamp(o,0,1);
	o = pow(o, 0.5);
	o2 = remap(0.3, 0.5, 0, 1, o2);
	o2 = clamp(o2,0,1);
	o *= o2;
	ALBEDO = mix(ALBEDO, oxidized_albedo, o);
	ROUGHNESS = mix(ROUGHNESS, oxidized_roughness, o);
	METALLIC = mix(1.0, 0.0, o);
}
